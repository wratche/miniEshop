version: '3.3'

networks:
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  database-data: # named volumes can be managed easier using docker-compose

services:

  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TZ=${TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    networks:
      backend:
        aliases:
          - ${APP_HOST}

  php-fpm:
    build:
      context: .
      dockerfile: ./php-fpm/Dockerfile
      args:
        - APP_CODE_PATH=${APP_CODE_PATH_CONTAINER}
        - APP_GROUP=${APP_GROUP}
        - APP_GROUP_ID=${APP_GROUP_ID}
        - APP_USER=${APP_USER}
        - APP_USER_ID=${APP_USER_ID}
        - TZ=${TIMEZONE}
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - ./php-fpm/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini

    networks:
      - backend

  postgres:
    image: postgres:10-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: eshop
      PGDATA: /data/postgres
    volumes:
      - database-data:/var/lib/postgresql/data/ # persist data even if container shuts down
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
        - "5433:5432"
    networks:
      - backend
    restart: always

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres
    ports:
        - 8080:8080
    networks:
        - backend